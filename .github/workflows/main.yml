name: Deploy React and Node.js to AWS (aaPanel)

on:
  push:
    branches:
      - main   #   Runs deployment only when changes are pushed to 'main' branch
      #test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üõé Checkout Repository
      uses: actions/checkout@v3

    - name: üîê Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.AWS_HOST }}" >> ~/.ssh/known_hosts

    - name: üõ† Install Dependencies & Build Frontend
      run: |
        # Set CI=false to avoid warnings being treated as errors
        export CI=false

        # Navigate to the web frontend directory
        cd code/web-frontend
        
        # Install all necessary dependencies
        npm install
        
        # Optionally install missing Babel plugin
        npm install --save-dev @babel/plugin-proposal-private-property-in-object
        
        # Run the build script to generate the production build
        npm run build
        
        # Check if the build directory exists and display its contents (for debugging)
        if [ -d "build" ]; then
          echo "Build directory exists."
          ls -la build  # List the contents of the build directory
        else
          echo "Build directory does not exist."
          exit 1  # Exit with error code to fail the job if build directory is missing
        fi

    - name: üöÄ Deploy Frontend to AWS (aaPanel)
      run: |
        if [ -d "./code/web-frontend/build/" ]; then
          echo "‚úÖ Found 'build/' directory. Deploying frontend..."
          scp -r ./code/web-frontend/build/* root@${{ secrets.AWS_HOST }}:/www/wwwroot/vescueye.work.gd
        else
          echo "‚ùå 'build/' directory not found! Exiting..."
          exit 1
        fi



    - name: üöÄ Deploy Backend to AWS (aaPanel)
      run: |
        ssh root@${{ secrets.AWS_HOST }} << 'EOF'
          # Check if PM2 is installed, install if not
          which pm2 || npm install -g pm2
          
          # Navigate to backend location
          cd /www/wwwroot/vescueye.work.gd/backend
          
          # Stop existing PM2 process if it exists and start a new one
          pm2 stop vescueye-backend || true
          pm2 delete vescueye-backend || true
          pm2 start server.js --name vescueye-backend
          
          # Save PM2 process & ensure it restarts on reboot
          pm2 save
          pm2 startup
        EOF

    - name: üìê Configure Apache Reverse Proxy
      run: |
        ssh root@${{ secrets.AWS_HOST }} << 'EOF'
          sudo systemctl restart apache2 || sudo systemctl restart nginx

          sudo a2enmod proxy proxy_http

          if ! grep -q "ProxyPass /backend" /etc/apache2/sites-available/000-default.conf; then
            sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-default.conf.bak
            sudo sed -i "s|DocumentRoot /www/wwwroot/vescueye.work.gd|DocumentRoot /www/wwwroot/vescueye.work.gd\n\tProxyPass /backend http://localhost:5000\n\tProxyPassReverse /backend http://localhost:5000|" /etc/apache2/sites-available/000-default.conf
            echo "Apache configuration updated successfully"
          else
            echo "Apache already configured with proxy settings"
          fi

          sudo apache2ctl configtest
          sudo systemctl restart apache2
        EOF

    - name: ‚úÖ Verify Deployment
      run: |
        echo "Testing application health..."
        curl -s "http://${{ secrets.AWS_HOST }}" | grep -q "Vascueye" && echo "‚úÖ Frontend OK" || echo "‚ùå Frontend Error"
        curl -s "http://${{ secrets.AWS_HOST }}/backend" | grep -q "Vascueye Backend is Running" && echo "‚úÖ Backend OK" || echo "‚ùå Backend Error"

