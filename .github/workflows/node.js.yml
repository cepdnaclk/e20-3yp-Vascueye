name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'code/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: code/backend
        run: npm ci --only=production
      
      - name: Set environment variables
        working-directory: code/backend
        run: |
          echo "${{ secrets.VESCUEYE_SECRETS }}" > .env
          # Add CORS configuration
          echo "CORS_ORIGIN=https://vescueye.duckdns.org" >> .env
          echo "CORS_CREDENTIALS=true" >> .env
      
      - name: Build application
        working-directory: code/backend
        run: npm run build --if-present
      
      - name: Install PM2 globally
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
      
      - name: Clean up existing processes
        run: |
          echo "Cleaning up old processes..."
          # Stop and remove all other processes except api
          pm2 stop server || true
          pm2 stop vascueye-backend || true
          pm2 delete server || true
          pm2 delete vascueye-backend || true
          
          # Clean up any other processes
          pm2 list | grep -v "api" | awk '{print $2}' | tail -n +4 | head -n -1 | xargs -r pm2 delete || true
          
          echo "Remaining processes:"
          pm2 status
      
      - name: Deploy with PM2 (Single API Only)
        working-directory: code/backend
        run: |
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'api',
              script: 'server.js',
              instances: 1, // Only 1 instance for 1 CPU core
              exec_mode: 'fork', // Use fork mode instead of cluster
              env: {
                NODE_ENV: 'production',
                PORT: process.env.PORT || 3000,
                UV_THREADPOOL_SIZE: 4 // Minimal thread pool
              },
              node_args: [
                '--max-old-space-size=256', // Very low memory limit
                '--max-semi-space-size=32'
              ],
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true,
              max_memory_restart: '200M', // Low memory restart
              autorestart: true,
              watch: false,
              kill_timeout: 3000,
              listen_timeout: 15000,
              wait_ready: true,
              min_uptime: '10s',
              max_restarts: 3,
              // Minimal resource usage
              treekill: true,
              pmx: false,
              automation: false
            }]
          }
          EOF
          
          mkdir -p logs
          
          # Clean restart of api only
          if pm2 describe api > /dev/null 2>&1; then
            echo "Restarting api process..."
            pm2 restart api --update-env
          else
            echo "Starting new api process..."
            pm2 start ecosystem.config.js
          fi
          
          pm2 save
      
      - name: Warm up application
        run: |
          echo "Warming up application..."
          sleep 8
          
          # Warm up multiple endpoints to initialize caches
          for i in {1..3}; do
            curl -s -f http://localhost:3000/health || curl -s -f http://localhost:3000/ || echo "Warmup attempt $i"
            sleep 2
          done
      
      - name: Health Check
        run: |
          # Check PM2 process status
          if pm2 describe api > /dev/null 2>&1; then
            echo "PM2 process 'api' is running"
            pm2 status api
          else
            echo "PM2 process 'api' is not running"
            exit 1
          fi
      
      - name: Finalize Deployment
        run: |
          # Clear PM2 logs to free up memory
          pm2 flush
          
          # Show final status
          pm2 show api
          
          echo "Deployment completed successfully!"
          echo "Application is running with performance optimizations"
