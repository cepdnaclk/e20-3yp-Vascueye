name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'code/backend/package-lock.json'
      
      - name: Clean npm cache
        working-directory: code/backend
        run: |
          npm cache clean --force
          rm -rf node_modules
          rm -f package-lock.json
      
      - name: Install dependencies
        working-directory: code/backend
        run: |
          # Install ALL dependencies (including dev dependencies)
          npm install
          
          # Ensure critical dependencies are installed
          npm install jsonwebtoken bcryptjs cors express mongoose dotenv
          
          # Generate fresh package-lock.json
          npm audit fix --force || true
      
      - name: Set environment variables
        working-directory: code/backend
        run: |
          echo "${{ secrets.VESCUEYE_SECRETS }}" > .env
          # Add CORS configuration
          echo "CORS_ORIGIN=https://vescueye.duckdns.org" >> .env
          echo "CORS_CREDENTIALS=true" >> .env
      
      - name: Verify dependencies
        working-directory: code/backend
        run: |
          echo "Verifying critical dependencies..."
          node -e "
            const deps = ['jsonwebtoken', 'express', 'mongoose', 'cors', 'bcryptjs', 'dotenv'];
            deps.forEach(dep => {
              try {
                require(dep);
                console.log('✓ ' + dep + ' is available');
              } catch (e) {
                console.log('✗ ' + dep + ' is missing');
                process.exit(1);
              }
            });
          "
      
      - name: Build application
        working-directory: code/backend
        run: npm run build --if-present
      
      - name: Install PM2 globally
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
      
      - name: Clean up existing processes
        run: |
          echo "Cleaning up old processes..."
          # Stop and remove all other processes except api
          pm2 stop server || true
          pm2 stop vascueye-backend || true
          pm2 delete server || true
          pm2 delete vascueye-backend || true
          
          # Clean up any other processes
          pm2 list | grep -v "api" | awk '{print $2}' | tail -n +4 | head -n -1 | xargs -r pm2 delete || true
          
          echo "Remaining processes:"
          pm2 status
      
      - name: Deploy with PM2 (Single API Only)
        working-directory: code/backend
        run: |
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'api',
              script: 'server.js',
              instances: 1, // Only 1 instance for 1 CPU core
              exec_mode: 'fork', // Use fork mode instead of cluster
              env: {
                NODE_ENV: 'production',
                PORT: process.env.PORT || 3000,
                UV_THREADPOOL_SIZE: 4 // Minimal thread pool
              },
              node_args: [
                '--max-old-space-size=512', // Increased memory limit
                '--max-semi-space-size=64'   // Increased semi-space
              ],
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true,
              max_memory_restart: '400M', // Increased memory restart threshold
              autorestart: true,
              watch: false,
              kill_timeout: 5000,
              listen_timeout: 20000,
              wait_ready: true,
              min_uptime: '10s',
              max_restarts: 5, // Increased restart attempts
              // Minimal resource usage
              treekill: true,
              pmx: false,
              automation: false
            }]
          }
          EOF
          
          mkdir -p logs
          
          # Clean restart of api only
          if pm2 describe api > /dev/null 2>&1; then
            echo "Stopping existing api process..."
            pm2 stop api
            pm2 delete api
          fi
          
          echo "Starting new api process..."
          pm2 start ecosystem.config.js
          
          pm2 save
      
      - name: Wait for application startup
        run: |
          echo "Waiting for application to start..."
          sleep 15
          
          # Check if the process is actually running
          if ! pm2 describe api > /dev/null 2>&1; then
            echo "API process failed to start!"
            pm2 logs api --lines 50
            exit 1
          fi
      
      - name: Warm up application
        run: |
          echo "Warming up application..."
          
          # Wait for the server to be ready
          for i in {1..10}; do
            if curl -s -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "Server is responding!"
              break
            elif curl -s -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "Server is responding!"
              break
            else
              echo "Warmup attempt $i/10 - server not ready yet"
              sleep 3
            fi
            
            if [ $i -eq 10 ]; then
              echo "Server failed to respond after 10 attempts"
              pm2 logs api --lines 20
            fi
          done
      
      - name: Health Check
        run: |
          # Check PM2 process status
          if pm2 describe api > /dev/null 2>&1; then
            echo "PM2 process 'api' is running"
            pm2 status api
            
            # Check if process is actually healthy (not errored)
            if pm2 jlist | jq -r '.[] | select(.name=="api") | .pm2_env.status' | grep -q "online"; then
              echo "✓ API process is online and healthy"
            else
              echo "✗ API process is not healthy"
              pm2 logs api --lines 30
              exit 1
            fi
          else
            echo "PM2 process 'api' is not running"
            exit 1
          fi
      
      - name: Finalize Deployment
        run: |
          # Clear PM2 logs to free up memory
          pm2 flush
          
          # Show final status
          pm2 show api
          
          echo "Deployment completed successfully!"
          echo "Application is running with performance optimizations"
          
          # Final verification
          curl -s http://localhost:3000/health || echo "Health check endpoint not available"
